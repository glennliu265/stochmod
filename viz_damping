#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

viz_damping
Created on Tue Aug 11 00:19:08 2020


Script to visualize damping parameter...
@author: gliu
"""

from scipy.io import loadmat
import numpy as np
from scipy import stats

import matplotlib.pyplot as plt
import sys
sys.path.append("/Users/gliu/Downloads/02_Research/01_Projects/01_AMV/00_Commons/03_Scripts/")
from amv import viz,proc
import cartopy.crs as ccrs
import cmocean
import cartopy
#%%


# Indicate Settings
flux   = "NHFLX"  # Flux Name
monwin = 3        # 3 month smoothing or 1 month only
dof    = 82       # Degrees of Freedom for Significance Testing
p      = 0.20     # p-value
tails  = 2        # two-tailed or one-tailed test...
lags   = [1]    # indicate lags to use


# Set Paths
datpath = "/Users/gliu/Downloads/02_Research/01_Projects/01_AMV/01_hfdamping/01_Data/"
outpath = "/Users/gliu/Downloads/02_Research/01_Projects/01_AMV/02_stochmod/02_Figures/20200811/"
# Plotting
bbox = [280, 360, 0, 90]
cmap = cmocean.cm.tempo


#%% Load Necessary Data

# Load Lat Lon
mat1 = loadmat(datpath+"CESM1_LATLON.mat")
lon = np.squeeze(mat1["LON"])
lat = np.squeeze(mat1["LAT"])

# Load damping variable [lon x lat x ens x mon x lag]
mat2 = loadmat("%s%s_damping_ensorem1_monwin%i.mat" % (datpath,flux,monwin))
damping = mat2['damping'] # [lon x lat x ens x mon x lag]

# Load correlation coefficients [lon x lat x ens x mon x lag]
mat3 = loadmat("%s%s_rho_ensorem1_monwin%i.mat" % (datpath,flux,monwin))
rflx = mat3['rho']

# Load SST autoorrelation coefficients
mat4 = loadmat("%sSST_rho_ensorem1_monwin%i.mat"% (datpath,monwin))
rsst = mat4['rsst']

#%% Compute DOF stuff

ptilde    = 1-p/tails
critval   = stats.t.ppf(1-ptilde,dof)
corrthres = np.sqrt(1/ ((dof/np.power(critval,2))+1))

#%% Create Mask

msst = np.zeros(damping.shape)
mflx = np.zeros(damping.shape)
msst[rsst > corrthres] = 1
mflx[rflx > corrthres] = 1
mtot = msst + mflx
mall = msst * mflx

#%% Make some frequency plots

# Select # of lags and sum over all dimensions

if len(lags) > 1:
    lagidx = np.array(lags)-1
else:
    lagidx = 0

mchoose = mtot[:,:,:,:,lagidx]



if len(lags) > 1:
    mfreq  = np.nansum(mchoose,(2,3,4))
else:
    mfreq  = np.nansum(mchoose,(2,3))


# Calculate maximum possible successes x2 (for mflx and msst)
maxscore = np.prod(mchoose.shape[2:])* 2




# Make Plot
cint = np.arange(0,1.1,.1)
fig,ax = plt.subplots(1,1,subplot_kw={'projection':ccrs.PlateCarree()},figsize=(6,4))
ax = viz.init_map(bbox,ax=ax)
pcm = ax.contourf(lon,lat,mfreq.T/maxscore,cint,cmap=cmap)
cl = ax.contour(lon,lat,mfreq.T/maxscore,cint,colors="k",linewidths = 0.5)
plt.clabel(cl,np.arange(0,1.2,0.2),fmt="%.1f")
ax.set_title("Total Number of Significant Damping Values\n"+ r"Max = %i | p = %.2f | $\rho$ > %.2f " % (maxscore,p,corrthres))
plt.colorbar(pcm,ax=ax)
plt.savefig(outpath+"%s_SigPts_monwin%i_lags12_sig%03d.png"%(flux,monwin,p*100),dpi=200)


#%% Apply Test and Make resultant damping (ens and annual average)


# Apply Mask
dampmasked = damping * mall

# Select Lags
dampchoose = dampmasked[:,:,:,:,lagidx]

# Take ensemble and lag haverage
if len(lags) > 1:
    dampseason = np.nanmean(dampchoose,(2,4))
else:
    dampseason = np.nanmean(dampchoose,(2))





# Make Plot

fig,axs = plt.subplots(1,2,subplot_kw={'projection':ccrs.PlateCarree()},figsize=(6,4))

ax = axs[0]
cint = np.arange(0,1.1,.1)
ax = viz.init_map(bbox,ax=ax)
pcm = ax.contourf(lon,lat,mfreq.T/maxscore,cint,cmap=cmap)
cl = ax.contour(lon,lat,mfreq.T/maxscore,cint,colors="k",linewidths = 0.5)
ax.clabel(cl,np.arange(0,1.2,0.2),fmt="%.1f")
ax.set_title("# of Sig. Values\n"+ r"Max = %i " % (maxscore))
plt.colorbar(pcm,ax=ax,orientation="horizontal")
#plt.savefig(outpath+"%s_SigPts_monwin%i_lags12_sig%03d.png"%(flux,monwin,p*100),dpi=200)



ax = axs[1]
cint = np.arange(-50,55,5)
ax = viz.init_map(bbox,ax=ax)
pcm = ax.contourf(lon,lat,np.nanmean(dampseason,2).T,cint,cmap=cmocean.cm.balance)
cl = ax.contour(lon,lat,np.nanmean(dampseason,2).T,cint,colors="k",linewidths = 0.5)
ax.clabel(cl,fmt="%i")
ax.set_title("%s Damping (Ann, Lag, Ens Avg)\n" % flux+ r"| p = %.2f | $\rho$ > %.2f " % (p,corrthres))
plt.colorbar(pcm,ax=ax,orientation="horizontal")
plt.savefig(outpath+"%s_Damping_and_SigPts_monwin%i_lags12_sig%03d.png"%(flux,monwin,p*100),dpi=200)

